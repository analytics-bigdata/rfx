apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.7

version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile (    		 	
		'io.vertx:vertx-core:2.1.5'
		,'com.typesafe.akka:akka-actor_2.10:2.3.8'
		,'com.google.code.gson:gson:2.3'    		
		,'log4j:log4j:1.2.17'
		,'org.jsoup:jsoup:1.8.1'    		
		,'org.apache.commons:commons-lang3:3.3.2'
		,'commons-net:commons-net:3.3'    		
		,'redis.clients:jedis:2.6.1'
		,'org.apache.httpcomponents:httpclient:4.3.6'
    )
    testCompile (
    	'junit:junit:4.12'    	
    	,'org.mockito:mockito-core:1.+'	
    )
}

ext.rfxCoreMasterManifest = manifest {
   attributes ('Implementation-Title': 'rfx.core.MasterNodeStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': 'system.starter.MasterNodeStarter',
        			'Class-Path' : getClasspathStringJars() )
}

ext.rfxSupervisorManifest = manifest {
   attributes ('Implementation-Title': 'rfx.core.SupervisorNodeStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': 'system.starter.SupervisorNodeStarter',
        			'Class-Path' : getClasspathStringJars() )
}

ext.rfxScheduledJobManifest = manifest {
   attributes ('Implementation-Title': 'rfx.core.ScheduledJobNodeStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': 'system.starter.ScheduledJobNodeStarter',
        			'Class-Path' : getClasspathStringJars() )
}

// ------------ tasks for build src ---------------------

task listJars << {
    configurations.compile.each { File file -> println file.name }
}

def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

task printClasspathStringJars << {   
    println getClasspathStringJars()
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'rfx-lib'
       }
    }
}

jar {	 
   	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    version = ''
    baseName = 'rfx-core-master'
    manifest = project.manifest {
        from rfxCoreMasterManifest
    }
}

// ------------ copy tasks for core deployment ---------------------
task rfxCopyRuntimeLibs(type: Copy) {  
  into "build/libs/deps"  
  from configurations.compile  
}

task rfxCopyConfigs(type: Copy) {  
  into "build/libs/configs"  
  from files('configs')
}

task rfxCopyResources(type: Copy) {  
  into "build/libs/resources"  
  from files('resources')
}

task rfxCopyToRelease(type: Copy) {
    from('build/libs')
    into('../releases/rfx-core')
    include('**')
}
// ------------------------------------------------------------------

task rfxCoreMasterJar(type: Jar) {	
	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    version = ''
    baseName = 'rfx-core-master'
    manifest = project.manifest {
        from rfxCoreMasterManifest
    }
}

task rfxSupervisorJar(type: Jar) {	
	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    version = ''
    baseName = 'rfx-supervisor'
    manifest = project.manifest {
        from rfxSupervisorManifest
    }
}

task rfxScheduledJobJar(type: Jar) {	
	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    version = ''
    baseName = 'rfx-scheduled-job'
    manifest = project.manifest {
        from rfxScheduledJobManifest
    }
}

task sampleHelloWorker(type: Jar) {	
	dependsOn classes
    from(sourceSets.test.output) {
        include "**"
    }   
    version = ''
    baseName = 'sample.hello.HelloWorker'
    manifest {
   		attributes ('Implementation-Title': 'sample.hello.HelloWorker', 
        			'Implementation-Version': version ,
        			'Main-Class': 'sample.hello.HelloWorker',
        			'Class-Path' : getClasspathStringJars() + ' ./rfx-core-master.jar ; ' )
	}
}
