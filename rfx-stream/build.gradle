apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.7

version = '1.0'

repositories {
    mavenCentral()
    maven {
		url "http://hypergraphdb.org/maven"
    }
}

dependencies {
    compile (   		 	
    		'io.vertx:vertx-core:2.1.5'
    		,'com.typesafe.akka:akka-actor_2.10:2.3.7'
    		,'com.google.code.gson:gson:2.3'    		
    		,'log4j:log4j:1.2.17'    	
    		,'org.jsoup:jsoup:1.8.1'    		
    		,'org.apache.commons:commons-lang3:3.3.2'
    		,'commons-net:commons-net:3.3'    		
    		,'redis.clients:jedis:2.6.0'
    		,'org.apache.httpcomponents:httpclient:4.3.6'
    		,'io.reactivex:rxjava:1.0.2'    		
    		
    		, fileTree(dir: 'lib', include: '**/*.jar')    		
    		,'commons-dbcp:commons-dbcp:1.4'
    		,'commons-io:commons-io:2.4'    		
    		,'org.apache.commons:commons-math3:3.4'
    		,'org.mongodb:mongo-java-driver:2.12.4'    		
    		,'org.apache.kafka:kafka_2.10:0.8.1.1'
    		,'org.twitter4j:twitter4j-core:4.0.2'

    		,'org.yaml:snakeyaml:1.14'    		
    		
    		,'org.hypergraphdb:hypergraphdb:1.2'
			,'org.hypergraphdb:hgbdbje:1.2'
    		,'org.apache.commons:commons-math3:3.4'    		

    		)
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

ext.rfxStreamManifest = manifest {
   attributes ('Implementation-Title': 'rfx.stream.core.library', 
        			'Implementation-Version': version ,
        			'Main-Class': '.',
        			'Class-Path' : '.' )
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task listJars << {
    configurations.compile.each { File file -> println file.name }
}

task printClasspathStringJars << {   
    println getClasspathStringJars()
}

def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

task rfxCopyRuntimeLibs(type: Copy) {  
  into "build/libs/deps"  
  from configurations.compile  
}

task rfxCopyConfigs(type: Copy) {  
  into "build/libs/configs"  
  from files('configs')
}

task rfxCopyToRelease(type: Copy) {
    from('build/libs')
    into('../releases/rfx-stream')
    include('**')
}

task rfxStreamJar(type: Jar) {	
	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    version = ''
    baseName = 'rfx-stream'
    manifest = project.manifest {
        from rfxStreamManifest
    }
}

jar {
	dependsOn classes
    from(sourceSets.main.output) {
        include "**"
    }
    baseName = 'rfx-stream'
    manifest = project.manifest {
        from rfxStreamManifest
    }
}

task sampleTrackingItemWorker(type: Jar) {	
	dependsOn classes   
    from(sourceSets.test.output) {
        include "**"
    }  
    version = '1.0'
    baseName = 'tracking-item-worker'
    manifest {
   		attributes ('Implementation-Title': 'TrackingItemWorker', 
        			'Implementation-Version': version ,
        			'Main-Class': 'rfx.sample.item.tracking.TrackingItemWorker',
        			'Class-Path' : getClasspathStringJars() + ' ./rfx-stream-1.0.jar ; ' )
	}
}
